{"ast":null,"code":"import axios from'axios';// Use relative base URL so React proxy forwards to the backend (set in package.json)\nconst API_BASE_URL='/api';// Create axios instance with default config\nconst api=axios.create({baseURL:API_BASE_URL,withCredentials:true,// Important for session-based auth\nheaders:{'Content-Type':'application/json'}});// Request interceptor\napi.interceptors.request.use(config=>{return config;},error=>{return Promise.reject(error);});// Response interceptor\napi.interceptors.response.use(response=>{return response;},error=>{var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){// Do not redirect here; App routing will show Login when unauthenticated.\n// This avoids any accidental reload/redirect loops.\nconsole.warn('Unauthorized (401). Showing login page.');}return Promise.reject(error);});export default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","withCredentials","headers","interceptors","request","use","config","error","Promise","reject","response","_error$response","status","console","warn"],"sources":["C:/Users/User/Downloads/Invent-frontend/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Use relative base URL so React proxy forwards to the backend (set in package.json)\nconst API_BASE_URL = '/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  withCredentials: true, // Important for session-based auth\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor\napi.interceptors.request.use(\n  (config) => {\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    if (error.response?.status === 401) {\n      // Do not redirect here; App routing will show Login when unauthenticated.\n      // This avoids any accidental reload/redirect loops.\n      console.warn('Unauthorized (401). Showing login page.');\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default api;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB;AACA,KAAM,CAAAC,YAAY,CAAG,MAAM,CAE3B;AACA,KAAM,CAAAC,GAAG,CAAGF,KAAK,CAACG,MAAM,CAAC,CACvBC,OAAO,CAAEH,YAAY,CACrBI,eAAe,CAAE,IAAI,CAAE;AACvBC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,EAAK,CACV,MAAO,CAAAA,MAAM,CACf,CAAC,CACAC,KAAK,EAAK,CACT,MAAO,CAAAC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAC9B,CACF,CAAC,CAED;AACAT,GAAG,CAACK,YAAY,CAACO,QAAQ,CAACL,GAAG,CAC1BK,QAAQ,EAAK,CACZ,MAAO,CAAAA,QAAQ,CACjB,CAAC,CACAH,KAAK,EAAK,KAAAI,eAAA,CACT,GAAI,EAAAA,eAAA,CAAAJ,KAAK,CAACG,QAAQ,UAAAC,eAAA,iBAAdA,eAAA,CAAgBC,MAAM,IAAK,GAAG,CAAE,CAClC;AACA;AACAC,OAAO,CAACC,IAAI,CAAC,yCAAyC,CAAC,CACzD,CACA,MAAO,CAAAN,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAC9B,CACF,CAAC,CAED,cAAe,CAAAT,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}